#include <iostream>
using namespace std;

int n;
int areFriends[10][10];
bool taken[10] = {false, };

// taken[i]= i번째 학생이 짝을 이미 찾았으면 true, 아니면 false 
int countPairings(bool taken[10]) {
	// 남은 학생들 중 가장 번호가 빠른 학생을 찾는다.
	int firstFree = -1;
		for(int i=0; i<n; i++) {
		if(!taken[i]) {
			firstFree = i;
			break;
		}
	}	 
	
	// 기저 사례: 모든 학생이 짝을 찾았으면 한 가지 방법을 찾았으니 종료한다.
	if(firstFree == -1) return 1;
	
	int ret = 0;
	// firstFree에 부여된 번호의 학생돠 짝지을 학생을 결정한다.
	for(int pairWith = firstFree+1; pairWith < n; ++pairWith) {
		// pairWith 학생이 짝이 없고 firstFree와 pairWith 학생은 서로 친구이면 짝을 지어준다. 
		if(!taken[pairWith] && areFriends[firstFree][pairWith]){
			taken[firstFree] = taken[pairWith] = true;
			ret += countPairings(taken);
			taken[firstFree] = taken[pairWith] = false;
		}
	} 
	return ret;
}

// areFriends 배열 false로 초기화   
void resetAreFriends() {
	for(int i=0; i<10; i++) {
		for(int j=0; j<10; j++) {
			areFriends[i][j] = false;
		}
	}
}

int main(void) {
	int C,m;
	int a,b;
	
	cin >> C;
	for(int i=0; i<C; i++) {
		scanf(" %d %d",&n,&m);
		for(int j=0; j<m; j++) {
			scanf(" %d %d",&a,&b);
			areFriends[a][b] = areFriends[b][a] = true;
		}
		printf("%d\n",countPairings(taken));
		resetAreFriends();
	}
}